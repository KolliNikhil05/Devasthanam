<%@ Page Title="" Language="C#" MasterPageFile="~/views/MasterPages/Test.Master" AutoEventWireup="true" CodeBehind="JqueryDataTable.aspx.cs" Inherits="Devasthanam.views.Test.JqueryDataTable" %>
<asp:Content ID="Content1" ContentPlaceHolderID="head" runat="server">
 <script src="../../Scripts/Js_Page/CDNJavaScript.js"></script>
 <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
 <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css">
 <script type="text/javascript" src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script src="../../Scripts/Js_Page/JqueryDataTable.js"></script>
    <link href="../../StyleSheets/JqueryDataTable.css" rel="stylesheet" />
    <script>
        $(document).ready(function () {
            GetCandidates();
        });
    </script>
</asp:Content>
<asp:Content ID="Content2" ContentPlaceHolderID="ContentPlaceHolder1" runat="server">
       <div class="data">
<table id="Data1" class="display" ">
    <thead>
        <tr id="colName">
            <th>User ID</th>
            <th>Name</th>
            <th>SurName</th>
            <th>Phone</th>
            <th>City</th>
            <th>Action</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody>
    </tbody>
</table>
   </div>
</asp:Content>




function GetCandidates() {
    var editingRow = null;
    $.ajax({
        type: "POST",
        url: "JqueryDataTable.aspx/GetData",
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (response) {
            var data = JSON.parse(response.d);
            var table = $('#Data1').DataTable({
                data: data,
                columns: [
                    { "data": "userId" },
                    { "data": "uName" },
                    { "data": "SurName" },
                    { "data": "Phone" },
                    { "data": "City" },
                    {
                        "render": function (data, type, row) {
                            return '<div class="btn-group">' +
                                '<button class="btnedit">Edit</button>' +
                                '<button class="btnupdate" style="display:none;">Update</button>' +
                                '<button class="btncancel" style="display:none;">Cancel</button>' +
                                '</div>';
                        },
                    },
                    {
                        "render": function (data, type, row) {
                            return '<button class="btndelete">Delete</button>';
                        },
                    }
                ],
                lengthMenu: [5],
                pageLength: 5,
                autoWidth: false,
            });
            $('#Data1 tbody').on('click', '.btnedit', function (e) {
                e.preventDefault();
                if (editingRow !== null) {
                    cancelEdit(editingRow);
                }
                var tr = $(this).closest('tr');
                var row = table.row(tr);
                //tr.find('td:not(:first-child):not(:last-child)').each(function () {
                //    var cell = $(this);
                //    if (!cell.index()) {
                //        return;
                //    }
                //    cell.data('original-value', cell.text());
                //    var originalContent = cell.text();
                //    cell.html('<input type="text" class="form-control" value="' + originalContent + '">');
                //});
                tr.find('td:not(:first-child):not(:last-child):not(:nth-last-child(2))').each(function () {
                    var cell = $(this);
                    cell.data('original-value', cell.text());
                    var originalContent = cell.text();
                    cell.html('<input type="text" class="form-control" value="' + originalContent + '">');
                });
                tr.find('.btnedit').hide();
                tr.find('.btnupdate').show();
                tr.find('.btncancel').show();
                editingRow = tr;
            });
            $('#Data1 tbody').on('click', '.btncancel', function (e) {
                e.preventDefault();
                var tr = $(this).closest('tr');
                tr.find('td').each(function () {
                    var cell = $(this);
                    var originalValue = cell.data('original-value');
                    cell.html(originalValue);
                });
                tr.find('.btnedit').show();
                tr.find('.btnupdate').hide();
                tr.find('.btncancel').hide();
                cancelEdit(tr);
            });
            $('#Data1 tbody').on('click', '.btnupdate', function (e) {
                e.preventDefault();
                var tr = $(this).closest('tr');//we can also use .parent('tr');
                var updatedUserId = tr.find('td:eq(0)').text();
                var updatedName = tr.find('td:eq(1) input').val();
                var updatedSurname = tr.find('td:eq(2) input').val();
                var updatedPhone = tr.find('td:eq(3) input').val();
                var updatedCity = tr.find('td:eq(4) input').val();
                $.ajax({
                    type: 'POST',
                    url: 'JqueryDataTable.aspx/UpdateData',
                    data: JSON.stringify({
                        userId: updatedUserId,
                        uName: updatedName,
                        SurName: updatedSurname,
                        Phone: updatedPhone,
                        City: updatedCity
                    }),
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    success: function (response) {
                        alert("Updated Sucessfully");

                        table.clear();

                        // Add updated data to the table
                        var newData = JSON.parse(response.d);
                        table.rows.add(newData).draw();

                        editingRow = null;
                    },
                    error: function (error) {

                    }
                });
                tr.find('td').each(function () {
                    var cell = $(this);
                    var inputVal = cell.find('input').val();
                    cell.html(inputVal);
                });
                tr.find('.btnedit').show();
                tr.find('.btnupdate').hide();
                tr.find('.btncancel').hide();
                editingRow = null;
            });
            $('#Data1 tbody').on('click', '.btndelete', function (e) {
                e.preventDefault();
                var tr = $(this).closest('tr');
                var userId = tr.find('td:eq(0)').text();
                $.ajax({
                    type: 'POST',
                    url: 'JqueryDataTable.aspx/DeleteData',
                    data: JSON.stringify({
                        userId: userId,
                    }),
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    success: function (response) {
                        alert("Deletion successfully");
                        tr.remove();
                    },
                    error: function (xhr, status, error) {
                        alert("Error occurred during deletion.");
                    }
                });
            });
        },
        error: function () {
            alert("Error fetching data.");
        }
    });
    function cancelEdit(row) {
        row.find('td').each(function () {
            var cell = $(this);
            var originalValue = cell.data('original-value');
            cell.html(originalValue);
        });
        row.find('.btnedit').show();
        row.find('.btnupdate').hide();
        row.find('.btncancel').hide();
        editingRow = null;  
    }
}



using BAL;
using DevasthanamDAL;
using Newtonsoft.Json;
using System;
using System.Data;
using System.Data.SqlClient;
using System.Web.Services;

namespace Devasthanam.views.Test
{
    public partial class JqueryDataTable : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {

        }
        [WebMethod]
        public static string GetData()
        {
            string jsonResult = "";
            JqueryDataTableBAL objData = new JqueryDataTableBAL();
            DataTable dataTable = objData.GetRecruiteeData();
            jsonResult = JsonConvert.SerializeObject(dataTable);
            return jsonResult;
        }
        [WebMethod]
        public static void UpdateData(string userId, string uName, string SurName, string Phone, string City)
        {
            JqueryDataTableBAL objUpdate = new JqueryDataTableBAL();
            objUpdate.UpdateUserData(userId, uName, SurName, Phone, City);
        }
        [WebMethod]
        public static void DeleteData(string userId)
        {
            JqueryDataTableBAL objDelete = new JqueryDataTableBAL();
            objDelete.DeleteUserData(userId);
        }
    }
}



using DAL;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BAL
{
    public class JqueryDataTableBAL
    {
        public DataTable GetRecruiteeData()
        {
            JqueryDataTableDAL objData = new JqueryDataTableDAL();
            DataTable dataTable = objData.GetRecruiteeData();

            return dataTable;
        }
        public void UpdateUserData(string userId, string uName, string SurName, string Phone, string City)
        {
            JqueryDataTableDAL objUpdate = new JqueryDataTableDAL();
            objUpdate.UpdateUserData(userId, uName, SurName, Phone, City);
        }
        public void DeleteUserData(string userId)
        {
            JqueryDataTableDAL objDelete = new JqueryDataTableDAL();
            objDelete.DeleteUserData(userId);
        }



    }
}





using DevasthanamDAL;
using System;
using System.Data;
using System.Data.SqlClient;
using System.Web;

namespace DAL
{
    public class JqueryDataTableDAL
    {
        public DataTable GetRecruiteeData()
        {
            HttpContext context = HttpContext.Current;
            DataTable dt = new DataTable();
            SqlConnection connection = new SqlConnection(Connection.connectionString_Devasthanam);
            SqlCommand cmd;
            try
            {
                if (connection.State == ConnectionState.Closed)
                {
                    connection.Open();
                }
                cmd = connection.CreateCommand();
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "JDTData_Get";
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
            return dt;
        }
        public void UpdateUserData(string userId, string uName, string SurName, string Phone, string City)
        {
            using (SqlConnection connection = new SqlConnection(Connection.connectionString_Devasthanam))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand("JDTData_Update", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddWithValue("@userId", userId);
                    command.Parameters.AddWithValue("@uName", uName);
                    command.Parameters.AddWithValue("@SurName", SurName);
                    command.Parameters.AddWithValue("@Phone", Phone);
                    command.Parameters.AddWithValue("@City", City);

                    command.ExecuteNonQuery();
                }
            }
        }
        public  void DeleteUserData(string userId)
        {
            using (SqlConnection connection = new SqlConnection(Connection.connectionString_Devasthanam))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand("JDTData_Delete", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddWithValue("@userId", userId);

                    command.ExecuteNonQuery();
                }
            }
        }
    }
}





CREATE PROCEDURE  JDTData_Get       
AS        
BEGIN        
    SELECT userId,uName, SurName,Phone,Email,Gender,DOB,City,UAddress,Qualification,UPercentage       
    FROM registrations   
 order by userId  
END


CREATE PROCEDURE JDTData_Update      
    @userId INT,      
    @uName NVARCHAR(15),      
    @SurName NVARCHAR(15),      
    @Phone NVARCHAR(10),      
    @City NVARCHAR(20)      
AS      
BEGIN      
    UPDATE registrations      
    SET uName = @uName, SurName = @SurName, Phone = @Phone, City = @City      
    WHERE userId = @userId;      
END


CREATE PROCEDURE JDTData_Delete  
    @userId INT  
AS  
BEGIN  
    DELETE FROM registrations  
    WHERE userId = @userId;  
END