<%@ Page Title="" Language="C#" MasterPageFile="~/views/MasterPages/MainMaster.Master" AutoEventWireup="true" CodeBehind="RoleOptions.aspx.cs" Inherits="Devasthanam.views.UserHome.RoleOptions" %>

<asp:Content ID="Content1" ContentPlaceHolderID="head" runat="server">
    <link href="../../StyleSheets/RoleOptions.css" rel="stylesheet" />
    <script src="../../Scripts/Js_Page/RoleOptions.js"></script>
    <script src="../../Scripts/Js_Page/CDNJavaScript.js"></script>
    <script src="../../Scripts/Js_Page/jqueryCdn.js"></script>
</asp:Content>
<asp:Content ID="Content2" ContentPlaceHolderID="ContentPlaceHolder1" runat="server">

    <div class="container">

        <div class="container1">
            <div class="name">
                <asp:Label AssociatedControlID="txtName" ID="lblName" runat="server">Name:</asp:Label><br />
                <asp:TextBox ID="txtName" runat="server" MaxLength="15" MinLength="3" placeholder="Enter Your Name"></asp:TextBox><br />
                <asp:RequiredFieldValidator ID="rfvName" runat="server" ControlToValidate="txtName"
                    ForeColor="Red" ErrorMessage="Please Enter Your Name" Display="Dynamic" SetFocusOnError="true" />
                <asp:RegularExpressionValidator ID="revName" runat="server" ControlToValidate="txtName"
                    ValidationExpression="^.{3,}$" ForeColor="Red" ErrorMessage="Name should be more than 2 characters" Display="Dynamic" SetFocusOnError="true" />
                <asp:RegularExpressionValidator ID="revNoNumbers" runat="server" ControlToValidate="txtName"
                    ValidationExpression="^[^\d]+$" ForeColor="Red" ErrorMessage="Name should not contain any numbers" Display="Dynamic" SetFocusOnError="true" />
                <br />
            </div>
            <div class="surname">
                <asp:Label AssociatedControlID="txtSurName" ID="lblSurName" runat="server">SurName:</asp:Label><br />
                <asp:TextBox ID="txtSurName" runat="server" MaxLength="15" MinLength="3" placeholder="Enter Your SurName"></asp:TextBox><br />
                <asp:RequiredFieldValidator ID="RfvSurName" runat="server" ControlToValidate="txtSurName"
                    ForeColor="Red" ErrorMessage="Please Enter Your SurName" Display="Dynamic" SetFocusOnError="true" />
                <asp:RegularExpressionValidator ID="revSurName" runat="server" ControlToValidate="txtSurName"
                    ValidationExpression="^.{3,}$" ForeColor="Red" ErrorMessage="SurName should be more than 2 characters" Display="Dynamic" SetFocusOnError="true" />
                <asp:RegularExpressionValidator ID="revSurnameNumbers" runat="server" ControlToValidate="txtSurName"
                    ValidationExpression="^[^\d]+$" ForeColor="Red" ErrorMessage="SurName should not contain any numbers" Display="Dynamic" SetFocusOnError="true" />
                <br />
            </div>
        </div>






        <asp:ScriptManager ID="ScriptManager1" runat="server"></asp:ScriptManager>
        <asp:UpdatePanel runat="server" UpdateMode="Conditional">
            <Triggers>
                <asp:AsyncPostBackTrigger ControlID="ddlDistrict" EventName="SelectedIndexChanged" />
            </Triggers>
            <ContentTemplate>
                <div class="container2">
                    <div class="district">
                        <asp:Label AssociatedControlID="ddlDistrict" ID="lblDistrict" runat="server">District:</asp:Label><br />
                        <asp:DropDownList ID="ddlDistrict" runat="server" AutoPostBack="true" OnSelectedIndexChanged="ddlDistrict_SelectedIndexChanged">
                        </asp:DropDownList>
                        <br />
                        <asp:RequiredFieldValidator ID="rfvddlDistrict" runat="server" ControlToValidate="ddlDistrict"
                            ForeColor="Red" ErrorMessage="Select a District" InitialValue="0" Display="Dynamic" SetFocusOnError="true" />
                    </div>
                    <div class="mandal">
                        <asp:Label AssociatedControlID="ddlMandal" ID="lblMandal" runat="server">Mandal:</asp:Label><br />
                        <asp:DropDownList ID="ddlMandal" runat="server">
                            <asp:ListItem Text="Select Your Mandal" Value="0" />
                        </asp:DropDownList><br />
                        <asp:RequiredFieldValidator ID="rfvddlMandal" runat="server" ControlToValidate="ddlMandal"
                            ForeColor="Red" ErrorMessage="Please Select a Mandal" InitialValue="0" Display="Dynamic" SetFocusOnError="true" />
                    </div>
                </div>
            </ContentTemplate>
        </asp:UpdatePanel>







        <div class="container3">
            <div class="gender">
                <asp:Label AssociatedControlID="rdbGender" ID="lblGender" runat="server">Gender:</asp:Label>
                <asp:RadioButtonList ID="rdbGender" runat="server" RepeatDirection="Horizontal">
                    <asp:ListItem Text="Male" name="gender" Value="Male"></asp:ListItem>
                    <asp:ListItem Text="Female" name="gender" Value="Female"></asp:ListItem>
                    <asp:ListItem Text="Prefer Not to Say" name="gender" Value="Prefer Not to Say"></asp:ListItem>
                </asp:RadioButtonList><br />
                <asp:RequiredFieldValidator ID="rfvrdb" runat="server" ControlToValidate="rdbGender"
                    ForeColor="Red" ErrorMessage="Please select a gender" Display="Dynamic" SetFocusOnError="true" />
            </div>
        </div>
    </div>








    <div class="container4">
        <asp:UpdatePanel ID="updatePanel" runat="server" UpdateMode="Conditional" ChildrenAsTriggers="true">
            <ContentTemplate>
                <div class="skills">
                    <asp:Label AssociatedControlID="lstSkills" ID="lblSkills" runat="server">âœ” Skills If You are 100% Sure:</asp:Label><br />
                    <asp:CheckBoxList ID="lstSkills" runat="server" class="checkbox" AutoPostBack="true" OnSelectedIndexChanged="lstSkills_SelectedIndexChanged"></asp:CheckBoxList>
                    <asp:Label ID="lblValidation" runat="server" ForeColor="Red" Visible="false">Please select at least one skill</asp:Label>
                </div>
            </ContentTemplate>
        </asp:UpdatePanel>
        <div class="roles">
            <asp:UpdatePanel ID="updatePanelRoles" runat="server" UpdateMode="Conditional">
                <ContentTemplate>
                    <asp:Label AssociatedControlID="lstRoles" ID="lblRoles" runat="server">Choose Role:</asp:Label><br />
                    <asp:ListBox runat="server" ID="lstRoles" CssClass="lstrole" SelectionMode="Multiple" AutoPostBack="true"></asp:ListBox>
                    <asp:Button runat="server" ID="Insert" Text="Insert" class="btn" OnClick="Insert_Click" />
                </ContentTemplate>
            </asp:UpdatePanel>
        </div>
    </div>


    <div class="container5">
        <div class="getroles">
            <asp:UpdatePanel ID="updatePanelEditRoles" runat="server" UpdateMode="Conditional">
                <ContentTemplate>
                    <asp:Label AssociatedControlID="lstEditRoles" ID="lblEditRoles" runat="server">Edit Role:</asp:Label>
                    <asp:ListBox runat="server" ID="lstEditRoles" CssClass="lstrole" AutoPostBack="true"></asp:ListBox><br />
                    <asp:RequiredFieldValidator ID="rfvLstEditRoles" runat="server" ControlToValidate="lstEditRoles"
                        ForeColor="Red" ErrorMessage="Please select a role" Display="Dynamic" SetFocusOnError="true" />
                </ContentTemplate>
            </asp:UpdatePanel>
        </div>
        <div class="buttons">
            <asp:UpdatePanel ID="UpdatePanel4" runat="server">
                <ContentTemplate>
                    <asp:Button runat="server" ID="Reset" Text="Reset" class="btn" OnClick="Reset_Click" />
                    <asp:Button runat="server" ID="SelectAll" Text="Select All" class="btn" OnClick="SelectAll_Click" />
                    <asp:Button runat="server" ID="Delete" Text="Delete" class="btn" OnClick="Delete_Click" />
                </ContentTemplate>
                <Triggers>
                    <asp:AsyncPostBackTrigger ControlID="Reset" />

                </Triggers>
            </asp:UpdatePanel>
        </div>
        <div class="Dob">
            <asp:UpdatePanel ID="UpdatePanel5" runat="server">
                <ContentTemplate>
                    <asp:Label AssociatedControlID="calDOB" ID="lblDOB" runat="server">Reporting Available for:</asp:Label>
                    <asp:Calendar ID="calDOB" runat="server" OnSelectionChanged="cal_SelectionChanged"></asp:Calendar>
                    <input runat="server" type="hidden" id="txtHidden" />
                </ContentTemplate>
                <Triggers>
                    <asp:AsyncPostBackTrigger ControlID="calDOB" />
                </Triggers>
            </asp:UpdatePanel>
        </div>
    </div>









    <div class="container6">
        <div class="upload">
            <asp:Label AssociatedControlID="Upload" ID="lblUpload" runat="server">CMM:</asp:Label>
            <asp:FileUpload ID="Upload" runat="server" AutoPostBack="true" /><br />
            <asp:RequiredFieldValidator ID="rfvUpload" runat="server" ControlToValidate="Upload"
                ForeColor="Red" ErrorMessage="Please select a file"
                Display="Dynamic" SetFocusOnError="true" />
        </div>
        <asp:Button ID="btnSubmit" class="btn" runat="server" Text="Submit" OnClick="btnSubmit_Click" OnClientClick="return validation();" />
    </div>

</asp:Content>

































using BAL;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Routing;
using System.Web.UI;
using System.Web.UI.WebControls;
namespace Devasthanam.views.UserHome
{
    public partial class RoleOptions : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                RoleOptionsBAL bal = new RoleOptionsBAL();
                ddlDistrict.DataSource = bal.GetDistricts();
                ddlDistrict.DataTextField = "District";
                ddlDistrict.DataValueField = "DistrictId";
                ddlDistrict.DataBind();
                ddlDistrict.Items.Insert(0, new ListItem("Select District", "0"));



                RoleOptionsBAL skillsTable = new RoleOptionsBAL();
                lstSkills.DataSource = skillsTable.GetSkills();
                lstSkills.DataTextField = "Skill";
                lstSkills.DataValueField = "SkillId";
                lstSkills.DataBind();

                
            }
        }
        public void ddlDistrict_SelectedIndexChanged(object sender, EventArgs e)
        {
            string selectedDistrictId = ddlDistrict.SelectedValue;

            if (selectedDistrictId != "0")
            {
                RoleOptionsBAL bal = new RoleOptionsBAL();
                ddlMandal.DataSource = bal.GetMandals(selectedDistrictId);
                ddlMandal.DataTextField = "Mandal";
                ddlMandal.DataValueField = "MandalId";
                ddlMandal.DataBind();
            }
            else
            {
                ddlMandal.Items.Clear();
            }
            ddlMandal.Items.Insert(0, new ListItem("Select Mandal", "0"));
        }

        public void lstSkills_SelectedIndexChanged(object sender, EventArgs e)
        {
            List<string> selectedSkillIds = new List<string>();
            foreach (ListItem item in lstSkills.Items)
            {
                if (item.Selected)
                {
                    selectedSkillIds.Add(item.Value);
                }
            }
            DataTable rolesTable = new DataTable();
            foreach (string skillId in selectedSkillIds)
            {
                DataTable rolesForSkill = new RoleOptionsBAL().GetRoles(skillId);
                rolesTable.Merge(rolesForSkill);
            }
            lstRoles.DataSource = rolesTable;
            lstRoles.DataTextField = "Role";
            lstRoles.DataValueField = "RoleId";
            lstRoles.DataBind();
            updatePanelRoles.Update();
        }

        //public void Insert_Click(object sender, EventArgs e)
        //{
        //    if (lstRoles.SelectedIndex >= 0)
        //    {
        //        string selectedRoleId = lstRoles.SelectedValue;
        //        RoleOptionsBAL roleBAL = new RoleOptionsBAL();
        //        DataTable roleData = roleBAL.GetRoleById(selectedRoleId);
        //        if (roleData.Rows.Count > 0)
        //        {
        //            lstEditRoles.DataSource = roleData;
        //            lstEditRoles.DataTextField = "Role";
        //            lstEditRoles.DataValueField = "RoleId";
        //            lstEditRoles.DataBind();
        //        }
        //    }


        //}
        public void Insert_Click(object sender, EventArgs e)
        {
            if (lstRoles.SelectedIndex >= 0)
            {
                string selectedRoleId = lstRoles.SelectedValue;
                RoleOptionsBAL roleBAL = new RoleOptionsBAL();
                DataTable roleData = roleBAL.GetRoleById(selectedRoleId);
                if (roleData.Rows.Count > 0)
                {
                    lstEditRoles.DataSource = roleData;
                    lstEditRoles.DataTextField = "Role";
                    lstEditRoles.DataValueField = "RoleId";
                    lstEditRoles.DataBind();

                    // Trigger update for the updatePanelEditRoles
                    updatePanelRoles.Update();
                    updatePanelEditRoles.Update();
                }
            }
        }


        //public void Insert_Click(object sender, EventArgs e)
        //{
        //    if (lstRoles.SelectedIndex >= 0)
        //    {
        //        string selectedRoleId = lstRoles.SelectedValue;
        //        RoleOptionsBAL roleBAL = new RoleOptionsBAL();
        //        DataTable roleData = roleBAL.GetRoleById(selectedRoleId);

        //        lstEditRoles.Items.Clear(); // Clear existing items

        //        foreach (DataRow row in roleData.Rows)
        //        {
        //            ListItem listItem = new ListItem(row["Role"].ToString(), row["RoleId"].ToString());
        //            lstEditRoles.Items.Add(listItem);
        //        }
        //        updatePanelRoles.Update();
        //        updatePanelEditRoles.Update();
        //    }
        //}


        public void Reset_Click(object sender, EventArgs e)
        {
            lstEditRoles.Items.Clear();
        }

        public void SelectAll_Click(object sender, EventArgs e)
        {
            foreach (ListItem item in lstRoles.Items)
            {
                item.Selected = true;
            }
            List<ListItem> selectedItems = new List<ListItem>();
            foreach (ListItem item in lstRoles.Items)
            {
                if (item.Selected)
                {
                    selectedItems.Add(item);
                }
            }
            lstEditRoles.DataSource = selectedItems;
            lstEditRoles.DataTextField = "Text";
            lstEditRoles.DataValueField = "Value";
            lstEditRoles.DataBind();
        }

        public void Delete_Click(object sender, EventArgs e)
        {
            // Iterate through selected items and remove them from the ListBox
            for (int i = lstEditRoles.Items.Count - 1; i >= 0; i--)
            {
                if (lstEditRoles.Items[i].Selected)
                {
                    lstEditRoles.Items.RemoveAt(i);
                }
            }
        }


        public void btnSubmit_Click(object sender, EventArgs e)
        {
            if (lstSkills.Items.Cast<ListItem>().Any(li => li.Selected))
            {               
                lblValidation.Visible = false;
            }
            else
            {          
                lblValidation.Visible = true;
            }
            string virtualPath = ConfigurationManager.AppSettings["uploads"].ToString();
            if (Upload.HasFile)
            {
                string fileName = Path.GetFileName(Upload.FileName);
                string fileExtension = Path.GetExtension(fileName);
                string file = virtualPath + fileName;
                Upload.SaveAs(file);
            }
        }

        //public void cal_SelectionChanged(object sender, EventArgs e)
        //{
        //    var DateID = calDOB.SelectedDate.ToString();
        //    txtHidden.Value = DateID;
        //}

        public void cal_SelectionChanged(object sender, EventArgs e)
        {
            DateTime selectedDate = calDOB.SelectedDate;
            if (selectedDate < DateTime.Today)
            {
                calDOB.SelectedDate = DateTime.Today;
            }
            txtHidden.Value = calDOB.SelectedDate.ToString();
        }


        public void cvDOB_ServerValidate(object source, ServerValidateEventArgs args)
        {
            
            args.IsValid = calDOB.SelectedDate != DateTime.MinValue;
        }

    }
}















using DAL;
using System.Collections.Generic;
using System.Data;

namespace BAL
{
    public class RoleOptionsBAL
    {
        public RoleOptionsDAL dal = new RoleOptionsDAL();

        public DataTable GetDistricts()
        {
            return dal.GetDistricts();
        }

        public DataTable GetMandals(string districtId)
        {
            return dal.GetMandals(districtId);
        }

        public DataTable GetSkills()
        {
            return dal.GetSkills();
        }

        public DataTable GetRoles(string skillId)
        {
            return dal.GetRoles(skillId);
        }

        public DataTable GetRoleById(string roleId)
        {
            RoleOptionsDAL roleDAL = new RoleOptionsDAL();
            return roleDAL.GetRoleById(roleId);
        }
    }
}


















using System.Configuration;
using System.Data;
using System.Data.SqlClient;
namespace DAL
{
    public class RoleOptionsDAL
    {
        public DataTable GetDistricts()
        {
            string connectionString = ConfigurationManager.ConnectionStrings["connection_data"].ConnectionString;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                using (SqlCommand cmd = new SqlCommand("Districts_Get", connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    connection.Open();
                    DataTable dt = new DataTable();
                    //dt.Load(cmd.ExecuteReader());
                    using (SqlDataAdapter adapter = new SqlDataAdapter(cmd))
                    {
                        adapter.Fill(dt);
                    }
                    return dt;
                }
            }
        }

        public DataTable GetMandals(string districtId)
        {
            string connectionString = ConfigurationManager.ConnectionStrings["connection_data"].ConnectionString;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                using (SqlCommand cmd = new SqlCommand("Mandals_Get", connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@DistrictId", districtId);
                    connection.Open();
                    DataTable dt = new DataTable();
                    using (SqlDataAdapter adapter = new SqlDataAdapter(cmd))
                    {
                        adapter.Fill(dt);
                    }
                    return dt;
                }
            }
        }

        public string connectionString = System.Configuration.ConfigurationManager.ConnectionStrings["connection_data"].ConnectionString;

        public DataTable GetSkills()
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();
                using (SqlCommand cmd = new SqlCommand("Skills_Get", connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    using (SqlDataAdapter adapter = new SqlDataAdapter(cmd))
                    {
                        DataTable skillsTable = new DataTable();
                        adapter.Fill(skillsTable);
                        return skillsTable;
                    }
                }
            }
        }

        public DataTable GetRoles(string skillId)
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();
                using (SqlCommand cmd = new SqlCommand("Role_Get", connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@SkillId", skillId);
                    using (SqlDataAdapter adapter = new SqlDataAdapter(cmd))
                    {
                        DataTable rolesTable = new DataTable();
                        adapter.Fill(rolesTable);
                        return rolesTable;
                    }
                }
            }
        }

        public DataTable GetRoleById(string roleId)
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();
                string query = "SELECT RoleId, Role FROM Roles WHERE RoleId = @RoleId";
                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@RoleId", roleId);
                    SqlDataAdapter adapter = new SqlDataAdapter(command);
                    DataTable dataTable = new DataTable();
                    adapter.Fill(dataTable);
                    return dataTable;
                }
            }
        }

    }
}

       



1	11	HelpLine
1	12	RouteAdvicer
2	21	QueueTimeManager
3	31	WorkersManager
4	41	ComplaintsManager
5	51	SponsorManager
6	61	Manager
7	71	QueueMovementManager
8	81	EventManager
9	91	ParkingManager
9	92	TicketCounterManager
9	93	PrasadamCounterManager










1	Communication
2	TimeManagement
3	LeaderShip
4	ActiveListening
5	Colloboration
6	RealtimeProblemSolving
7	Patience
8	ProjectManagement
9	Others





1	Visakhapatnam
2	Tirupathi
3	Vijayawada






1	1	Gopalapatnam
1	2	Madhurawada
1	3	Gajuwaka
1	4	Pendurthi
1	5	Sabbavaram
1	6	Anakapalli
1	7	Chodavaram
1	8	Araku
2	1	Renigunta
2	2	Putur
2	3	NarayanaVanam
2	4	Chilakur
2	5	SriKalaHasti
3	1	Machilipatnam
3	2	Gannavaram
3	3	Avanigadda
3	4	Gudlavalleru





CREATE PROCEDURE Districts_Get    
AS        
BEGIN        
    SELECT DistrictId, District       
    FROM Districts        
END




CREATE PROCEDURE Mandals_Get   
@DistrictId varchar(25)  
AS        
BEGIN        
    SELECT DistrictId, MandalId,Mandal       
    FROM Mandal    
 WHERE DistrictId=@DistrictId  
END



CREATE PROCEDURE Skills_Get      
AS          
BEGIN          
    SELECT SkillId, Skill         
    FROM Skills          
END


CREATE PROCEDURE Role_Get     
@SkillId varchar(25)    
AS          
BEGIN          
    SELECT SkillId, RoleId,Role         
    FROM Roles      
 WHERE SkillId=@SkillId    
END



CREATE procedure SelectRole_Get    
@RoleId varchar(25)    
AS    
BEGIN    
SELECT RoleId,Role    
From Roles    
where RoleId=@RoleId    
End












 